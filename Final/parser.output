Terminals unused in grammar

   CHAR


State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: stmt $@1 program
    3        | /* empty */

    4 break: BREAK SEMICOLON

    5 continue: CONTINUE SEMICOLON

    6 stmt: expr SEMICOLON
    7     | ifstmt
    8     | whilestmt
    9     | forstmt
   10     | returnstmt
   11     | break
   12     | continue
   13     | block
   14     | funcdef
   15     | SEMICOLON

   16 expr: assignexpr
   17     | expr PLUS expr
   18     | expr MINUS expr
   19     | expr MUL expr
   20     | expr DIV expr
   21     | expr MOD expr
   22     | expr EQ expr
   23     | expr NOT_EQ expr
   24     | expr LESS_THAN expr
   25     | expr GREATER_THAN expr
   26     | expr LESS_EQ expr
   27     | expr GREATER_EQ expr

   28 $@2: /* empty */

   29 expr: expr AND $@2 M expr

   30 $@3: /* empty */

   31 expr: expr OR $@3 M expr
   32     | term

   33 term: L_PARENTHESIS expr R_PARENTHESIS
   34     | MINUS expr
   35     | NOT expr
   36     | PLUS_PLUS lvalue
   37     | lvalue PLUS_PLUS
   38     | MINUS_MINUS lvalue
   39     | lvalue MINUS_MINUS
   40     | primary

   41 assignexpr: lvalue ASSIGN expr

   42 primary: lvalue
   43        | call
   44        | objectdef
   45        | L_PARENTHESIS funcdef R_PARENTHESIS
   46        | const

   47 lvalue: ID
   48       | LOCAL ID
   49       | D_COLON ID
   50       | member

   51 member: lvalue DOT ID
   52       | lvalue L_BRACKET expr R_BRACKET
   53       | call DOT ID
   54       | call L_BRACKET expr R_BRACKET

   55 call: call L_PARENTHESIS elist R_PARENTHESIS
   56     | lvalue callsuffix
   57     | L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

   58 callsuffix: normcall
   59           | methodcall

   60 normcall: L_PARENTHESIS elist R_PARENTHESIS

   61 methodcall: D_DOT ID L_PARENTHESIS elist R_PARENTHESIS

   62 elist: expr
   63      | elist COMMA expr
   64      | /* empty */

   65 $@4: /* empty */

   66 objectdef: L_BRACKET $@4 elist R_BRACKET

   67 $@5: /* empty */

   68 objectdef: L_BRACKET $@5 indexed R_BRACKET

   69 indexed: indexedelem
   70        | indexed COMMA indexedelem

   71 indexedelem: L_BRACE expr COLON expr R_BRACE

   72 $@6: /* empty */

   73 block: L_BRACE $@6 block_1 R_BRACE

   74 block_1: stmt block_1
   75        | /* empty */

   76 funcname: ID
   77         | /* empty */

   78 funcprefix: FUNCTION funcname

   79 $@7: /* empty */

   80 funcargs: L_PARENTHESIS $@7 idlist R_PARENTHESIS

   81 funcblockstart: /* empty */

   82 funcblockend: /* empty */

   83 funcbody: funcblockstart block funcblockend

   84 funcdef: funcprefix funcargs funcbody

   85 const: INTEGER
   86      | DOUBLE
   87      | STRING
   88      | NIL
   89      | TRUE
   90      | FALSE

   91 idlist: ID idlist_1
   92       | /* empty */

   93 idlist_1: COMMA idlist
   94         | /* empty */

   95 ifprefix: IF L_PARENTHESIS expr R_PARENTHESIS

   96 elseprefix: ELSE

   97 ifstmt: ifprefix stmt
   98       | ifprefix stmt elseprefix stmt

   99 loopstart: /* empty */

  100 loopend: /* empty */

  101 loopstmt: loopstart stmt loopend

  102 whilestart: WHILE

  103 whilecond: L_PARENTHESIS expr R_PARENTHESIS

  104 whilestmt: whilestart whilecond loopstmt

  105 N: /* empty */

  106 M: /* empty */

  107 $@8: /* empty */

  108 forprefix: FOR $@8 L_PARENTHESIS elist SEMICOLON M expr SEMICOLON

  109 $@9: /* empty */

  110 forstmt: forprefix N elist R_PARENTHESIS $@9 N loopstmt N

  111 returnstmt: RETURN expr SEMICOLON
  112           | RETURN SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 85
DOUBLE (259) 86
STRING (260) 87
CHAR (261)
ID (262) 47 48 49 51 53 61 76 91
L_BRACE (263) 71 73
R_BRACE (264) 71 73
L_PARENTHESIS (265) 33 45 55 57 60 61 80 95 103 108
R_PARENTHESIS (266) 33 45 55 57 60 61 80 95 103 110
L_BRACKET (267) 52 54 66 68
R_BRACKET (268) 52 54 66 68
SEMICOLON (269) 4 5 6 15 108 111 112
COMMA (270) 63 70 93
COLON (271) 71
D_COLON (272) 49
DOT (273) 51 53
D_DOT (274) 61
PLUS (275) 17
MINUS (276) 18 34
MUL (277) 19
DIV (278) 20
MOD (279) 21
PLUS_PLUS (280) 36 37
MINUS_MINUS (281) 38 39
ASSIGN (282) 41
EQ (283) 22
NOT_EQ (284) 23
LESS_THAN (285) 24
GREATER_THAN (286) 25
LESS_EQ (287) 26
GREATER_EQ (288) 27
IF (289) 95
ELSE (290) 96
AND (291) 29
NOT (292) 35
OR (293) 31
LOCAL (294) 48
TRUE (295) 89
FALSE (296) 90
WHILE (297) 102
FOR (298) 108
FUNCTION (299) 78
RETURN (300) 111 112
BREAK (301) 4
CONTINUE (302) 5
NIL (303) 88
UMINUS (304)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 2 3, on right: 0 2
$@1 (52)
    on left: 1, on right: 2
break (53)
    on left: 4, on right: 11
continue (54)
    on left: 5, on right: 12
stmt (55)
    on left: 6 7 8 9 10 11 12 13 14 15, on right: 2 74 97 98 101
expr (56)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 29 31 32, on right:
    6 17 18 19 20 21 22 23 24 25 26 27 29 31 33 34 35 41 52 54 62 63
    71 95 103 108 111
$@2 (57)
    on left: 28, on right: 29
$@3 (58)
    on left: 30, on right: 31
term (59)
    on left: 33 34 35 36 37 38 39 40, on right: 32
assignexpr (60)
    on left: 41, on right: 16
primary (61)
    on left: 42 43 44 45 46, on right: 40
lvalue (62)
    on left: 47 48 49 50, on right: 36 37 38 39 41 42 51 52 56
member (63)
    on left: 51 52 53 54, on right: 50
call (64)
    on left: 55 56 57, on right: 43 53 54 55
callsuffix (65)
    on left: 58 59, on right: 56
normcall (66)
    on left: 60, on right: 58
methodcall (67)
    on left: 61, on right: 59
elist (68)
    on left: 62 63 64, on right: 55 57 60 61 63 66 108 110
objectdef (69)
    on left: 66 68, on right: 44
$@4 (70)
    on left: 65, on right: 66
$@5 (71)
    on left: 67, on right: 68
indexed (72)
    on left: 69 70, on right: 68 70
indexedelem (73)
    on left: 71, on right: 69 70
block (74)
    on left: 73, on right: 13 83
$@6 (75)
    on left: 72, on right: 73
block_1 (76)
    on left: 74 75, on right: 73 74
funcname (77)
    on left: 76 77, on right: 78
funcprefix (78)
    on left: 78, on right: 84
funcargs (79)
    on left: 80, on right: 84
$@7 (80)
    on left: 79, on right: 80
funcblockstart (81)
    on left: 81, on right: 83
funcblockend (82)
    on left: 82, on right: 83
funcbody (83)
    on left: 83, on right: 84
funcdef (84)
    on left: 84, on right: 14 45 57
const (85)
    on left: 85 86 87 88 89 90, on right: 46
idlist (86)
    on left: 91 92, on right: 80 93
idlist_1 (87)
    on left: 93 94, on right: 91
ifprefix (88)
    on left: 95, on right: 97 98
elseprefix (89)
    on left: 96, on right: 98
ifstmt (90)
    on left: 97 98, on right: 7
loopstart (91)
    on left: 99, on right: 101
loopend (92)
    on left: 100, on right: 101
loopstmt (93)
    on left: 101, on right: 104 110
whilestart (94)
    on left: 102, on right: 104
whilecond (95)
    on left: 103, on right: 104
whilestmt (96)
    on left: 104, on right: 8
N (97)
    on left: 105, on right: 110
M (98)
    on left: 106, on right: 29 31 108
forprefix (99)
    on left: 108, on right: 110
$@8 (100)
    on left: 107, on right: 108
forstmt (101)
    on left: 110, on right: 9
$@9 (102)
    on left: 109, on right: 110
returnstmt (103)
    on left: 111 112, on right: 10


State 0

    0 $accept: . program $end

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 3 (program)

    program     go to state 25
    break       go to state 26
    continue    go to state 27
    stmt        go to state 28
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 1

   85 const: INTEGER .

    $default  reduce using rule 85 (const)


State 2

   86 const: DOUBLE .

    $default  reduce using rule 86 (const)


State 3

   87 const: STRING .

    $default  reduce using rule 87 (const)


State 4

   47 lvalue: ID .

    $default  reduce using rule 47 (lvalue)


State 5

   73 block: L_BRACE . $@6 block_1 R_BRACE

    $default  reduce using rule 72 ($@6)

    $@6  go to state 48


State 6

   33 term: L_PARENTHESIS . expr R_PARENTHESIS
   45 primary: L_PARENTHESIS . funcdef R_PARENTHESIS
   57 call: L_PARENTHESIS . funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    FUNCTION       shift, and go to state 20
    NIL            shift, and go to state 24

    expr        go to state 49
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    funcprefix  go to state 38
    funcdef     go to state 50
    const       go to state 40


State 7

   66 objectdef: L_BRACKET . $@4 elist R_BRACKET
   68          | L_BRACKET . $@5 indexed R_BRACKET

    L_BRACE   reduce using rule 67 ($@5)
    $default  reduce using rule 65 ($@4)

    $@4  go to state 51
    $@5  go to state 52


State 8

   15 stmt: SEMICOLON .

    $default  reduce using rule 15 (stmt)


State 9

   49 lvalue: D_COLON . ID

    ID  shift, and go to state 53


State 10

   34 term: MINUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 54
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 11

   36 term: PLUS_PLUS . lvalue

    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 55
    D_COLON        shift, and go to state 9
    LOCAL          shift, and go to state 15

    lvalue  go to state 56
    member  go to state 34
    call    go to state 57


State 12

   38 term: MINUS_MINUS . lvalue

    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 55
    D_COLON        shift, and go to state 9
    LOCAL          shift, and go to state 15

    lvalue  go to state 58
    member  go to state 34
    call    go to state 57


State 13

   95 ifprefix: IF . L_PARENTHESIS expr R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 59


State 14

   35 term: NOT . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 60
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 15

   48 lvalue: LOCAL . ID

    ID  shift, and go to state 61


State 16

   89 const: TRUE .

    $default  reduce using rule 89 (const)


State 17

   90 const: FALSE .

    $default  reduce using rule 90 (const)


State 18

  102 whilestart: WHILE .

    $default  reduce using rule 102 (whilestart)


State 19

  108 forprefix: FOR . $@8 L_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    $default  reduce using rule 107 ($@8)

    $@8  go to state 62


State 20

   78 funcprefix: FUNCTION . funcname

    ID  shift, and go to state 63

    $default  reduce using rule 77 (funcname)

    funcname  go to state 64


State 21

  111 returnstmt: RETURN . expr SEMICOLON
  112           | RETURN . SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 65
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 66
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 22

    4 break: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 67


State 23

    5 continue: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 24

   88 const: NIL .

    $default  reduce using rule 88 (const)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 69


State 26

   11 stmt: break .

    $default  reduce using rule 11 (stmt)


State 27

   12 stmt: continue .

    $default  reduce using rule 12 (stmt)


State 28

    2 program: stmt . $@1 program

    $default  reduce using rule 1 ($@1)

    $@1  go to state 70


State 29

    6 stmt: expr . SEMICOLON
   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    SEMICOLON     shift, and go to state 71
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 30

   32 expr: term .

    $default  reduce using rule 32 (expr)


State 31

   16 expr: assignexpr .

    $default  reduce using rule 16 (expr)


State 32

   40 term: primary .

    $default  reduce using rule 40 (term)


State 33

   37 term: lvalue . PLUS_PLUS
   39     | lvalue . MINUS_MINUS
   41 assignexpr: lvalue . ASSIGN expr
   42 primary: lvalue .
   51 member: lvalue . DOT ID
   52       | lvalue . L_BRACKET expr R_BRACKET
   56 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 85
    L_BRACKET      shift, and go to state 86
    DOT            shift, and go to state 87
    D_DOT          shift, and go to state 88
    PLUS_PLUS      shift, and go to state 89
    MINUS_MINUS    shift, and go to state 90
    ASSIGN         shift, and go to state 91

    $default  reduce using rule 42 (primary)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 34

   50 lvalue: member .

    $default  reduce using rule 50 (lvalue)


State 35

   43 primary: call .
   53 member: call . DOT ID
   54       | call . L_BRACKET expr R_BRACKET
   55 call: call . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 95
    L_BRACKET      shift, and go to state 96
    DOT            shift, and go to state 97

    $default  reduce using rule 43 (primary)


State 36

   44 primary: objectdef .

    $default  reduce using rule 44 (primary)


State 37

   13 stmt: block .

    $default  reduce using rule 13 (stmt)


State 38

   84 funcdef: funcprefix . funcargs funcbody

    L_PARENTHESIS  shift, and go to state 98

    funcargs  go to state 99


State 39

   14 stmt: funcdef .

    $default  reduce using rule 14 (stmt)


State 40

   46 primary: const .

    $default  reduce using rule 46 (primary)


State 41

   97 ifstmt: ifprefix . stmt
   98       | ifprefix . stmt elseprefix stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    break       go to state 26
    continue    go to state 27
    stmt        go to state 100
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 42

    7 stmt: ifstmt .

    $default  reduce using rule 7 (stmt)


State 43

  104 whilestmt: whilestart . whilecond loopstmt

    L_PARENTHESIS  shift, and go to state 101

    whilecond  go to state 102


State 44

    8 stmt: whilestmt .

    $default  reduce using rule 8 (stmt)


State 45

  110 forstmt: forprefix . N elist R_PARENTHESIS $@9 N loopstmt N

    $default  reduce using rule 105 (N)

    N  go to state 103


State 46

    9 stmt: forstmt .

    $default  reduce using rule 9 (stmt)


State 47

   10 stmt: returnstmt .

    $default  reduce using rule 10 (stmt)


State 48

   73 block: L_BRACE $@6 . block_1 R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 75 (block_1)

    break       go to state 26
    continue    go to state 27
    stmt        go to state 104
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    block_1     go to state 105
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 49

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   33 term: L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 106
    PLUS           shift, and go to state 72
    MINUS          shift, and go to state 73
    MUL            shift, and go to state 74
    DIV            shift, and go to state 75
    MOD            shift, and go to state 76
    EQ             shift, and go to state 77
    NOT_EQ         shift, and go to state 78
    LESS_THAN      shift, and go to state 79
    GREATER_THAN   shift, and go to state 80
    LESS_EQ        shift, and go to state 81
    GREATER_EQ     shift, and go to state 82
    AND            shift, and go to state 83
    OR             shift, and go to state 84


State 50

   45 primary: L_PARENTHESIS funcdef . R_PARENTHESIS
   57 call: L_PARENTHESIS funcdef . R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 107


State 51

   66 objectdef: L_BRACKET $@4 . elist R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 109
    objectdef   go to state 36
    const       go to state 40


State 52

   68 objectdef: L_BRACKET $@5 . indexed R_BRACKET

    L_BRACE  shift, and go to state 110

    indexed      go to state 111
    indexedelem  go to state 112


State 53

   49 lvalue: D_COLON ID .

    $default  reduce using rule 49 (lvalue)


State 54

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   34 term: MINUS expr .

    $default  reduce using rule 34 (term)


State 55

   57 call: L_PARENTHESIS . funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    FUNCTION  shift, and go to state 20

    funcprefix  go to state 38
    funcdef     go to state 113


State 56

   36 term: PLUS_PLUS lvalue .
   51 member: lvalue . DOT ID
   52       | lvalue . L_BRACKET expr R_BRACKET
   56 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 85
    L_BRACKET      shift, and go to state 86
    DOT            shift, and go to state 87
    D_DOT          shift, and go to state 88

    $default  reduce using rule 36 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 57

   53 member: call . DOT ID
   54       | call . L_BRACKET expr R_BRACKET
   55 call: call . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 95
    L_BRACKET      shift, and go to state 96
    DOT            shift, and go to state 97


State 58

   38 term: MINUS_MINUS lvalue .
   51 member: lvalue . DOT ID
   52       | lvalue . L_BRACKET expr R_BRACKET
   56 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 85
    L_BRACKET      shift, and go to state 86
    DOT            shift, and go to state 87
    D_DOT          shift, and go to state 88

    $default  reduce using rule 38 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 59

   95 ifprefix: IF L_PARENTHESIS . expr R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 114
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 60

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   35 term: NOT expr .

    $default  reduce using rule 35 (term)


State 61

   48 lvalue: LOCAL ID .

    $default  reduce using rule 48 (lvalue)


State 62

  108 forprefix: FOR $@8 . L_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    L_PARENTHESIS  shift, and go to state 115


State 63

   76 funcname: ID .

    $default  reduce using rule 76 (funcname)


State 64

   78 funcprefix: FUNCTION funcname .

    $default  reduce using rule 78 (funcprefix)


State 65

  112 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 112 (returnstmt)


State 66

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
  111 returnstmt: RETURN expr . SEMICOLON

    SEMICOLON     shift, and go to state 116
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 67

    4 break: BREAK SEMICOLON .

    $default  reduce using rule 4 (break)


State 68

    5 continue: CONTINUE SEMICOLON .

    $default  reduce using rule 5 (continue)


State 69

    0 $accept: program $end .

    $default  accept


State 70

    2 program: stmt $@1 . program

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 3 (program)

    program     go to state 117
    break       go to state 26
    continue    go to state 27
    stmt        go to state 28
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 71

    6 stmt: expr SEMICOLON .

    $default  reduce using rule 6 (stmt)


State 72

   17 expr: expr PLUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 118
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 73

   18 expr: expr MINUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 119
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 74

   19 expr: expr MUL . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 120
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 75

   20 expr: expr DIV . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 121
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 76

   21 expr: expr MOD . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 122
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 77

   22 expr: expr EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 123
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 78

   23 expr: expr NOT_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 124
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 79

   24 expr: expr LESS_THAN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 125
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 80

   25 expr: expr GREATER_THAN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 126
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 81

   26 expr: expr LESS_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 127
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 82

   27 expr: expr GREATER_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 128
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 83

   29 expr: expr AND . $@2 M expr

    $default  reduce using rule 28 ($@2)

    $@2  go to state 129


State 84

   31 expr: expr OR . $@3 M expr

    $default  reduce using rule 30 ($@3)

    $@3  go to state 130


State 85

   60 normcall: L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 131
    objectdef   go to state 36
    const       go to state 40


State 86

   52 member: lvalue L_BRACKET . expr R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 132
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 87

   51 member: lvalue DOT . ID

    ID  shift, and go to state 133


State 88

   61 methodcall: D_DOT . ID L_PARENTHESIS elist R_PARENTHESIS

    ID  shift, and go to state 134


State 89

   37 term: lvalue PLUS_PLUS .

    $default  reduce using rule 37 (term)


State 90

   39 term: lvalue MINUS_MINUS .

    $default  reduce using rule 39 (term)


State 91

   41 assignexpr: lvalue ASSIGN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 135
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 92

   56 call: lvalue callsuffix .

    $default  reduce using rule 56 (call)


State 93

   58 callsuffix: normcall .

    $default  reduce using rule 58 (callsuffix)


State 94

   59 callsuffix: methodcall .

    $default  reduce using rule 59 (callsuffix)


State 95

   55 call: call L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 136
    objectdef   go to state 36
    const       go to state 40


State 96

   54 member: call L_BRACKET . expr R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 137
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 97

   53 member: call DOT . ID

    ID  shift, and go to state 138


State 98

   80 funcargs: L_PARENTHESIS . $@7 idlist R_PARENTHESIS

    $default  reduce using rule 79 ($@7)

    $@7  go to state 139


State 99

   84 funcdef: funcprefix funcargs . funcbody

    $default  reduce using rule 81 (funcblockstart)

    funcblockstart  go to state 140
    funcbody        go to state 141


State 100

   97 ifstmt: ifprefix stmt .
   98       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 142

    ELSE      [reduce using rule 97 (ifstmt)]
    $default  reduce using rule 97 (ifstmt)

    elseprefix  go to state 143


State 101

  103 whilecond: L_PARENTHESIS . expr R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 144
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 102

  104 whilestmt: whilestart whilecond . loopstmt

    $default  reduce using rule 99 (loopstart)

    loopstart  go to state 145
    loopstmt   go to state 146


State 103

  110 forstmt: forprefix N . elist R_PARENTHESIS $@9 N loopstmt N

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 147
    objectdef   go to state 36
    const       go to state 40


State 104

   74 block_1: stmt . block_1

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 75 (block_1)

    break       go to state 26
    continue    go to state 27
    stmt        go to state 104
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    block_1     go to state 148
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 105

   73 block: L_BRACE $@6 block_1 . R_BRACE

    R_BRACE  shift, and go to state 149


State 106

   33 term: L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 33 (term)


State 107

   45 primary: L_PARENTHESIS funcdef R_PARENTHESIS .
   57 call: L_PARENTHESIS funcdef R_PARENTHESIS . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 150

    $default  reduce using rule 45 (primary)


State 108

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   62 elist: expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84

    $default  reduce using rule 62 (elist)


State 109

   63 elist: elist . COMMA expr
   66 objectdef: L_BRACKET $@4 elist . R_BRACKET

    R_BRACKET  shift, and go to state 151
    COMMA      shift, and go to state 152


State 110

   71 indexedelem: L_BRACE . expr COLON expr R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 153
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 111

   68 objectdef: L_BRACKET $@5 indexed . R_BRACKET
   70 indexed: indexed . COMMA indexedelem

    R_BRACKET  shift, and go to state 154
    COMMA      shift, and go to state 155


State 112

   69 indexed: indexedelem .

    $default  reduce using rule 69 (indexed)


State 113

   57 call: L_PARENTHESIS funcdef . R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 156


State 114

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   95 ifprefix: IF L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 157
    PLUS           shift, and go to state 72
    MINUS          shift, and go to state 73
    MUL            shift, and go to state 74
    DIV            shift, and go to state 75
    MOD            shift, and go to state 76
    EQ             shift, and go to state 77
    NOT_EQ         shift, and go to state 78
    LESS_THAN      shift, and go to state 79
    GREATER_THAN   shift, and go to state 80
    LESS_EQ        shift, and go to state 81
    GREATER_EQ     shift, and go to state 82
    AND            shift, and go to state 83
    OR             shift, and go to state 84


State 115

  108 forprefix: FOR $@8 L_PARENTHESIS . elist SEMICOLON M expr SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 158
    objectdef   go to state 36
    const       go to state 40


State 116

  111 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 111 (returnstmt)


State 117

    2 program: stmt $@1 program .

    $default  reduce using rule 2 (program)


State 118

   17 expr: expr . PLUS expr
   17     | expr PLUS expr .
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    MUL  shift, and go to state 74
    DIV  shift, and go to state 75
    MOD  shift, and go to state 76

    $default  reduce using rule 17 (expr)


State 119

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   18     | expr MINUS expr .
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    MUL  shift, and go to state 74
    DIV  shift, and go to state 75
    MOD  shift, and go to state 76

    $default  reduce using rule 18 (expr)


State 120

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   19     | expr MUL expr .
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    $default  reduce using rule 19 (expr)


State 121

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   20     | expr DIV expr .
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    $default  reduce using rule 20 (expr)


State 122

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   21     | expr MOD expr .
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    $default  reduce using rule 21 (expr)


State 123

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   22     | expr EQ expr .
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 22 (expr)


State 124

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   23     | expr NOT_EQ expr .
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 125

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   24     | expr LESS_THAN expr .
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 24 (expr)


State 126

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   25     | expr GREATER_THAN expr .
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 25 (expr)


State 127

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   26     | expr LESS_EQ expr .
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 26 (expr)


State 128

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   27     | expr GREATER_EQ expr .
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 27 (expr)


State 129

   29 expr: expr AND $@2 . M expr

    $default  reduce using rule 106 (M)

    M  go to state 159


State 130

   31 expr: expr OR $@3 . M expr

    $default  reduce using rule 106 (M)

    M  go to state 160


State 131

   60 normcall: L_PARENTHESIS elist . R_PARENTHESIS
   63 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 161
    COMMA          shift, and go to state 152


State 132

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   52 member: lvalue L_BRACKET expr . R_BRACKET

    R_BRACKET     shift, and go to state 162
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 133

   51 member: lvalue DOT ID .

    $default  reduce using rule 51 (member)


State 134

   61 methodcall: D_DOT ID . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 163


State 135

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   41 assignexpr: lvalue ASSIGN expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84

    $default  reduce using rule 41 (assignexpr)


State 136

   55 call: call L_PARENTHESIS elist . R_PARENTHESIS
   63 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 164
    COMMA          shift, and go to state 152


State 137

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   54 member: call L_BRACKET expr . R_BRACKET

    R_BRACKET     shift, and go to state 165
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 138

   53 member: call DOT ID .

    $default  reduce using rule 53 (member)


State 139

   80 funcargs: L_PARENTHESIS $@7 . idlist R_PARENTHESIS

    ID  shift, and go to state 166

    $default  reduce using rule 92 (idlist)

    idlist  go to state 167


State 140

   83 funcbody: funcblockstart . block funcblockend

    L_BRACE  shift, and go to state 5

    block  go to state 168


State 141

   84 funcdef: funcprefix funcargs funcbody .

    $default  reduce using rule 84 (funcdef)


State 142

   96 elseprefix: ELSE .

    $default  reduce using rule 96 (elseprefix)


State 143

   98 ifstmt: ifprefix stmt elseprefix . stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    break       go to state 26
    continue    go to state 27
    stmt        go to state 169
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 144

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
  103 whilecond: L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 170
    PLUS           shift, and go to state 72
    MINUS          shift, and go to state 73
    MUL            shift, and go to state 74
    DIV            shift, and go to state 75
    MOD            shift, and go to state 76
    EQ             shift, and go to state 77
    NOT_EQ         shift, and go to state 78
    LESS_THAN      shift, and go to state 79
    GREATER_THAN   shift, and go to state 80
    LESS_EQ        shift, and go to state 81
    GREATER_EQ     shift, and go to state 82
    AND            shift, and go to state 83
    OR             shift, and go to state 84


State 145

  101 loopstmt: loopstart . stmt loopend

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    break       go to state 26
    continue    go to state 27
    stmt        go to state 171
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 146

  104 whilestmt: whilestart whilecond loopstmt .

    $default  reduce using rule 104 (whilestmt)


State 147

   63 elist: elist . COMMA expr
  110 forstmt: forprefix N elist . R_PARENTHESIS $@9 N loopstmt N

    R_PARENTHESIS  shift, and go to state 172
    COMMA          shift, and go to state 152


State 148

   74 block_1: stmt block_1 .

    $default  reduce using rule 74 (block_1)


State 149

   73 block: L_BRACE $@6 block_1 R_BRACE .

    $default  reduce using rule 73 (block)


State 150

   57 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 173
    objectdef   go to state 36
    const       go to state 40


State 151

   66 objectdef: L_BRACKET $@4 elist R_BRACKET .

    $default  reduce using rule 66 (objectdef)


State 152

   63 elist: elist COMMA . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 174
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 153

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   71 indexedelem: L_BRACE expr . COLON expr R_BRACE

    COLON         shift, and go to state 175
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 154

   68 objectdef: L_BRACKET $@5 indexed R_BRACKET .

    $default  reduce using rule 68 (objectdef)


State 155

   70 indexed: indexed COMMA . indexedelem

    L_BRACE  shift, and go to state 110

    indexedelem  go to state 176


State 156

   57 call: L_PARENTHESIS funcdef R_PARENTHESIS . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 150


State 157

   95 ifprefix: IF L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 95 (ifprefix)


State 158

   63 elist: elist . COMMA expr
  108 forprefix: FOR $@8 L_PARENTHESIS elist . SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 177
    COMMA      shift, and go to state 152


State 159

   29 expr: expr AND $@2 M . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 178
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 160

   31 expr: expr OR $@3 M . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 179
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 161

   60 normcall: L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 60 (normcall)


State 162

   52 member: lvalue L_BRACKET expr R_BRACKET .

    $default  reduce using rule 52 (member)


State 163

   61 methodcall: D_DOT ID L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 64 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 180
    objectdef   go to state 36
    const       go to state 40


State 164

   55 call: call L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 55 (call)


State 165

   54 member: call L_BRACKET expr R_BRACKET .

    $default  reduce using rule 54 (member)


State 166

   91 idlist: ID . idlist_1

    COMMA  shift, and go to state 181

    $default  reduce using rule 94 (idlist_1)

    idlist_1  go to state 182


State 167

   80 funcargs: L_PARENTHESIS $@7 idlist . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 183


State 168

   83 funcbody: funcblockstart block . funcblockend

    $default  reduce using rule 82 (funcblockend)

    funcblockend  go to state 184


State 169

   98 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 98 (ifstmt)


State 170

  103 whilecond: L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 103 (whilecond)


State 171

  101 loopstmt: loopstart stmt . loopend

    $default  reduce using rule 100 (loopend)

    loopend  go to state 185


State 172

  110 forstmt: forprefix N elist R_PARENTHESIS . $@9 N loopstmt N

    $default  reduce using rule 109 ($@9)

    $@9  go to state 186


State 173

   57 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist . R_PARENTHESIS
   63 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 187
    COMMA          shift, and go to state 152


State 174

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   63 elist: elist COMMA expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84

    $default  reduce using rule 63 (elist)


State 175

   71 indexedelem: L_BRACE expr COLON . expr R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 188
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 176

   70 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 70 (indexed)


State 177

  108 forprefix: FOR $@8 L_PARENTHESIS elist SEMICOLON . M expr SEMICOLON

    $default  reduce using rule 106 (M)

    M  go to state 189


State 178

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   29     | expr AND $@2 M expr .
   31     | expr . OR $@3 M expr

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82

    $default  reduce using rule 29 (expr)


State 179

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   31     | expr OR $@3 M expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83

    $default  reduce using rule 31 (expr)


State 180

   61 methodcall: D_DOT ID L_PARENTHESIS elist . R_PARENTHESIS
   63 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 190
    COMMA          shift, and go to state 152


State 181

   93 idlist_1: COMMA . idlist

    ID  shift, and go to state 166

    $default  reduce using rule 92 (idlist)

    idlist  go to state 191


State 182

   91 idlist: ID idlist_1 .

    $default  reduce using rule 91 (idlist)


State 183

   80 funcargs: L_PARENTHESIS $@7 idlist R_PARENTHESIS .

    $default  reduce using rule 80 (funcargs)


State 184

   83 funcbody: funcblockstart block funcblockend .

    $default  reduce using rule 83 (funcbody)


State 185

  101 loopstmt: loopstart stmt loopend .

    $default  reduce using rule 101 (loopstmt)


State 186

  110 forstmt: forprefix N elist R_PARENTHESIS $@9 . N loopstmt N

    $default  reduce using rule 105 (N)

    N  go to state 192


State 187

   57 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 57 (call)


State 188

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
   71 indexedelem: L_BRACE expr COLON expr . R_BRACE

    R_BRACE       shift, and go to state 193
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 189

  108 forprefix: FOR $@8 L_PARENTHESIS elist SEMICOLON M . expr SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 194
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 190

   61 methodcall: D_DOT ID L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 61 (methodcall)


State 191

   93 idlist_1: COMMA idlist .

    $default  reduce using rule 93 (idlist_1)


State 192

  110 forstmt: forprefix N elist R_PARENTHESIS $@9 N . loopstmt N

    $default  reduce using rule 99 (loopstart)

    loopstart  go to state 145
    loopstmt   go to state 195


State 193

   71 indexedelem: L_BRACE expr COLON expr R_BRACE .

    $default  reduce using rule 71 (indexedelem)


State 194

   17 expr: expr . PLUS expr
   18     | expr . MINUS expr
   19     | expr . MUL expr
   20     | expr . DIV expr
   21     | expr . MOD expr
   22     | expr . EQ expr
   23     | expr . NOT_EQ expr
   24     | expr . LESS_THAN expr
   25     | expr . GREATER_THAN expr
   26     | expr . LESS_EQ expr
   27     | expr . GREATER_EQ expr
   29     | expr . AND $@2 M expr
   31     | expr . OR $@3 M expr
  108 forprefix: FOR $@8 L_PARENTHESIS elist SEMICOLON M expr . SEMICOLON

    SEMICOLON     shift, and go to state 196
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 195

  110 forstmt: forprefix N elist R_PARENTHESIS $@9 N loopstmt . N

    $default  reduce using rule 105 (N)

    N  go to state 197


State 196

  108 forprefix: FOR $@8 L_PARENTHESIS elist SEMICOLON M expr SEMICOLON .

    $default  reduce using rule 108 (forprefix)


State 197

  110 forstmt: forprefix N elist R_PARENTHESIS $@9 N loopstmt N .

    $default  reduce using rule 110 (forstmt)
