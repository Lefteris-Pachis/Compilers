Terminals unused in grammar

   CHAR


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | /* empty */

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | expr PLUS expr
   15     | expr MINUS expr
   16     | expr MUL expr
   17     | expr DIV expr
   18     | expr MOD expr
   19     | expr EQ expr
   20     | expr NOT_EQ expr
   21     | expr LESS_THAN expr
   22     | expr GREATER_THAN expr
   23     | expr LESS_EQ expr
   24     | expr GREATER_EQ expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: L_PARENTHESIS expr R_PARENTHESIS
   29     | UMINUS expr
   30     | NOT expr
   31     | PLUS_PLUS lvalue
   32     | lvalue PLUS_PLUS
   33     | MINUS_MINUS lvalue
   34     | lvalue MINUS_MINUS
   35     | primary

   36 assignexpr: lvalue ASSIGN expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | L_PARENTHESIS funcdef R_PARENTHESIS
   41        | const

   42 lvalue: ID
   43       | LOCAL ID
   44       | D_COLON ID
   45       | member

   46 member: lvalue DOT ID
   47       | lvalue L_BRACKET expr R_BRACKET
   48       | call DOT ID
   49       | call L_BRACKET expr R_BRACKET

   50 call: call L_PARENTHESIS elist R_PARENTHESIS
   51     | lvalue callsuffix
   52     | L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: L_PARENTHESIS elist R_PARENTHESIS

   56 methodcall: D_DOT ID L_PARENTHESIS elist R_PARENTHESIS

   57 elist: expr
   58      | elist COMMA expr
   59      | /* empty */

   60 objectdef: L_BRACKET elist R_BRACKET
   61          | L_BRACKET indexed R_BRACKET

   62 indexed: indexedelem
   63        | indexed COMMA indexedelem

   64 indexedelem: L_BRACE expr COLON expr R_BRACE

   65 $@1: /* empty */

   66 block: L_BRACE $@1 block_1 R_BRACE

   67 block_1: stmt block_1
   68        | /* empty */

   69 $@2: /* empty */

   70 $@3: /* empty */

   71 funcdef: FUNCTION $@2 L_PARENTHESIS $@3 idlist R_PARENTHESIS block

   72 $@4: /* empty */

   73 $@5: /* empty */

   74 funcdef: FUNCTION ID $@4 L_PARENTHESIS $@5 idlist R_PARENTHESIS block

   75 const: INTEGER
   76      | DOUBLE
   77      | STRING
   78      | NIL
   79      | TRUE
   80      | FALSE

   81 idlist: ID idlist_1
   82       | /* empty */

   83 idlist_1: COMMA idlist
   84         | /* empty */

   85 ifstmt: IF L_PARENTHESIS expr R_PARENTHESIS stmt
   86       | IF L_PARENTHESIS expr R_PARENTHESIS stmt ELSE stmt

   87 whilestmt: WHILE L_PARENTHESIS expr R_PARENTHESIS stmt

   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON expr SEMICOLON elist R_PARENTHESIS stmt

   89 returnstmt: RETURN expr SEMICOLON
   90           | RETURN SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 75
DOUBLE (259) 76
STRING (260) 77
CHAR (261)
ID (262) 42 43 44 46 48 56 74 81
L_BRACE (263) 64 66
R_BRACE (264) 64 66
L_PARENTHESIS (265) 28 40 50 52 55 56 71 74 85 86 87 88
R_PARENTHESIS (266) 28 40 50 52 55 56 71 74 85 86 87 88
L_BRACKET (267) 47 49 60 61
R_BRACKET (268) 47 49 60 61
SEMICOLON (269) 3 8 9 12 88 89 90
COMMA (270) 58 63 83
COLON (271) 64
D_COLON (272) 44
DOT (273) 46 48
D_DOT (274) 56
PLUS (275) 14
MINUS (276) 15
MUL (277) 16
DIV (278) 17
MOD (279) 18
PLUS_PLUS (280) 31 32
MINUS_MINUS (281) 33 34
ASSIGN (282) 36
EQ (283) 19
NOT_EQ (284) 20
LESS_THAN (285) 21
GREATER_THAN (286) 22
LESS_EQ (287) 23
GREATER_EQ (288) 24
IF (289) 85 86
ELSE (290) 86
AND (291) 25
NOT (292) 30
OR (293) 26
LOCAL (294) 43
TRUE (295) 79
FALSE (296) 80
WHILE (297) 87
FOR (298) 88
FUNCTION (299) 71 74
RETURN (300) 89 90
BREAK (301) 8
CONTINUE (302) 9
NIL (303) 78
UMINUS (304) 29


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2, on right: 0 1
stmt (52)
    on left: 3 4 5 6 7 8 9 10 11 12, on right: 1 67 85 86 87 88
expr (53)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    3 14 15 16 17 18 19 20 21 22 23 24 25 26 28 29 30 36 47 49 57 58
    64 85 86 87 88 89
term (54)
    on left: 28 29 30 31 32 33 34 35, on right: 27
assignexpr (55)
    on left: 36, on right: 13
primary (56)
    on left: 37 38 39 40 41, on right: 35
lvalue (57)
    on left: 42 43 44 45, on right: 31 32 33 34 36 37 46 47 51
member (58)
    on left: 46 47 48 49, on right: 45
call (59)
    on left: 50 51 52, on right: 38 48 49 50
callsuffix (60)
    on left: 53 54, on right: 51
normcall (61)
    on left: 55, on right: 53
methodcall (62)
    on left: 56, on right: 54
elist (63)
    on left: 57 58 59, on right: 50 52 55 56 58 60 88
objectdef (64)
    on left: 60 61, on right: 39
indexed (65)
    on left: 62 63, on right: 61 63
indexedelem (66)
    on left: 64, on right: 62 63
block (67)
    on left: 66, on right: 10 71 74
$@1 (68)
    on left: 65, on right: 66
block_1 (69)
    on left: 67 68, on right: 66 67
funcdef (70)
    on left: 71 74, on right: 11 40 52
$@2 (71)
    on left: 69, on right: 71
$@3 (72)
    on left: 70, on right: 71
$@4 (73)
    on left: 72, on right: 74
$@5 (74)
    on left: 73, on right: 74
const (75)
    on left: 75 76 77 78 79 80, on right: 41
idlist (76)
    on left: 81 82, on right: 71 74 83
idlist_1 (77)
    on left: 83 84, on right: 81
ifstmt (78)
    on left: 85 86, on right: 4
whilestmt (79)
    on left: 87, on right: 5
forstmt (80)
    on left: 88, on right: 6
returnstmt (81)
    on left: 89 90, on right: 7


State 0

    0 $accept: . program $end

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 1

   75 const: INTEGER .

    $default  reduce using rule 75 (const)


State 2

   76 const: DOUBLE .

    $default  reduce using rule 76 (const)


State 3

   77 const: STRING .

    $default  reduce using rule 77 (const)


State 4

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


State 5

   66 block: L_BRACE . $@1 block_1 R_BRACE

    $default  reduce using rule 65 ($@1)

    $@1  go to state 42


State 6

   28 term: L_PARENTHESIS . expr R_PARENTHESIS
   40 primary: L_PARENTHESIS . funcdef R_PARENTHESIS
   52 call: L_PARENTHESIS . funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    FUNCTION       shift, and go to state 19
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 43
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 44
    const       go to state 37


State 7

   60 objectdef: L_BRACKET . elist R_BRACKET
   61          | L_BRACKET . indexed R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 45
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr         go to state 46
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 47
    objectdef    go to state 34
    indexed      go to state 48
    indexedelem  go to state 49
    const        go to state 37


State 8

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


State 9

   44 lvalue: D_COLON . ID

    ID  shift, and go to state 50


State 10

   31 term: PLUS_PLUS . lvalue

    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 51
    D_COLON        shift, and go to state 9
    LOCAL          shift, and go to state 14

    lvalue  go to state 52
    member  go to state 32
    call    go to state 53


State 11

   33 term: MINUS_MINUS . lvalue

    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 51
    D_COLON        shift, and go to state 9
    LOCAL          shift, and go to state 14

    lvalue  go to state 54
    member  go to state 32
    call    go to state 53


State 12

   85 ifstmt: IF . L_PARENTHESIS expr R_PARENTHESIS stmt
   86       | IF . L_PARENTHESIS expr R_PARENTHESIS stmt ELSE stmt

    L_PARENTHESIS  shift, and go to state 55


State 13

   30 term: NOT . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 56
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 14

   43 lvalue: LOCAL . ID

    ID  shift, and go to state 57


State 15

   79 const: TRUE .

    $default  reduce using rule 79 (const)


State 16

   80 const: FALSE .

    $default  reduce using rule 80 (const)


State 17

   87 whilestmt: WHILE . L_PARENTHESIS expr R_PARENTHESIS stmt

    L_PARENTHESIS  shift, and go to state 58


State 18

   88 forstmt: FOR . L_PARENTHESIS elist SEMICOLON expr SEMICOLON elist R_PARENTHESIS stmt

    L_PARENTHESIS  shift, and go to state 59


State 19

   71 funcdef: FUNCTION . $@2 L_PARENTHESIS $@3 idlist R_PARENTHESIS block
   74        | FUNCTION . ID $@4 L_PARENTHESIS $@5 idlist R_PARENTHESIS block

    ID  shift, and go to state 60

    $default  reduce using rule 69 ($@2)

    $@2  go to state 61


State 20

   89 returnstmt: RETURN . expr SEMICOLON
   90           | RETURN . SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 62
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 63
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 21

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 64


State 22

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 23

   78 const: NIL .

    $default  reduce using rule 78 (const)


State 24

   29 term: UMINUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 66
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 25

    0 $accept: program . $end

    $end  shift, and go to state 67


State 26

    1 program: stmt . program

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 68
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 27

    3 stmt: expr . SEMICOLON
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    SEMICOLON     shift, and go to state 69
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


State 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


State 30

   35 term: primary .

    $default  reduce using rule 35 (term)


State 31

   32 term: lvalue . PLUS_PLUS
   34     | lvalue . MINUS_MINUS
   36 assignexpr: lvalue . ASSIGN expr
   37 primary: lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRACKET expr R_BRACKET
   51 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 83
    L_BRACKET      shift, and go to state 84
    DOT            shift, and go to state 85
    D_DOT          shift, and go to state 86
    PLUS_PLUS      shift, and go to state 87
    MINUS_MINUS    shift, and go to state 88
    ASSIGN         shift, and go to state 89

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 90
    normcall    go to state 91
    methodcall  go to state 92


State 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


State 33

   38 primary: call .
   48 member: call . DOT ID
   49       | call . L_BRACKET expr R_BRACKET
   50 call: call . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 93
    L_BRACKET      shift, and go to state 94
    DOT            shift, and go to state 95

    $default  reduce using rule 38 (primary)


State 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


State 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


State 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


State 37

   41 primary: const .

    $default  reduce using rule 41 (primary)


State 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 39

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 40

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 41

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 42

   66 block: L_BRACE $@1 . block_1 R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 68 (block_1)

    stmt        go to state 96
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    block_1     go to state 97
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 43

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   28 term: L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 98
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MUL            shift, and go to state 72
    DIV            shift, and go to state 73
    MOD            shift, and go to state 74
    EQ             shift, and go to state 75
    NOT_EQ         shift, and go to state 76
    LESS_THAN      shift, and go to state 77
    GREATER_THAN   shift, and go to state 78
    LESS_EQ        shift, and go to state 79
    GREATER_EQ     shift, and go to state 80
    AND            shift, and go to state 81
    OR             shift, and go to state 82


State 44

   40 primary: L_PARENTHESIS funcdef . R_PARENTHESIS
   52 call: L_PARENTHESIS funcdef . R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 99


State 45

   64 indexedelem: L_BRACE . expr COLON expr R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 100
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 46

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   57 elist: expr .

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82

    $default  reduce using rule 57 (elist)


State 47

   58 elist: elist . COMMA expr
   60 objectdef: L_BRACKET elist . R_BRACKET

    R_BRACKET  shift, and go to state 101
    COMMA      shift, and go to state 102


State 48

   61 objectdef: L_BRACKET indexed . R_BRACKET
   63 indexed: indexed . COMMA indexedelem

    R_BRACKET  shift, and go to state 103
    COMMA      shift, and go to state 104


State 49

   62 indexed: indexedelem .

    $default  reduce using rule 62 (indexed)


State 50

   44 lvalue: D_COLON ID .

    $default  reduce using rule 44 (lvalue)


State 51

   52 call: L_PARENTHESIS . funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    FUNCTION  shift, and go to state 19

    funcdef  go to state 105


State 52

   31 term: PLUS_PLUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRACKET expr R_BRACKET
   51 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 83
    L_BRACKET      shift, and go to state 84
    DOT            shift, and go to state 85
    D_DOT          shift, and go to state 86

    $default  reduce using rule 31 (term)

    callsuffix  go to state 90
    normcall    go to state 91
    methodcall  go to state 92


State 53

   48 member: call . DOT ID
   49       | call . L_BRACKET expr R_BRACKET
   50 call: call . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 93
    L_BRACKET      shift, and go to state 94
    DOT            shift, and go to state 95


State 54

   33 term: MINUS_MINUS lvalue .
   46 member: lvalue . DOT ID
   47       | lvalue . L_BRACKET expr R_BRACKET
   51 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 83
    L_BRACKET      shift, and go to state 84
    DOT            shift, and go to state 85
    D_DOT          shift, and go to state 86

    $default  reduce using rule 33 (term)

    callsuffix  go to state 90
    normcall    go to state 91
    methodcall  go to state 92


State 55

   85 ifstmt: IF L_PARENTHESIS . expr R_PARENTHESIS stmt
   86       | IF L_PARENTHESIS . expr R_PARENTHESIS stmt ELSE stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 106
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 56

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: NOT expr .

    $default  reduce using rule 30 (term)


State 57

   43 lvalue: LOCAL ID .

    $default  reduce using rule 43 (lvalue)


State 58

   87 whilestmt: WHILE L_PARENTHESIS . expr R_PARENTHESIS stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 107
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 59

   88 forstmt: FOR L_PARENTHESIS . elist SEMICOLON expr SEMICOLON elist R_PARENTHESIS stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 108
    objectdef   go to state 34
    const       go to state 37


State 60

   74 funcdef: FUNCTION ID . $@4 L_PARENTHESIS $@5 idlist R_PARENTHESIS block

    $default  reduce using rule 72 ($@4)

    $@4  go to state 109


State 61

   71 funcdef: FUNCTION $@2 . L_PARENTHESIS $@3 idlist R_PARENTHESIS block

    L_PARENTHESIS  shift, and go to state 110


State 62

   90 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 90 (returnstmt)


State 63

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   89 returnstmt: RETURN expr . SEMICOLON

    SEMICOLON     shift, and go to state 111
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 64

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


State 65

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 66

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: UMINUS expr .

    $default  reduce using rule 29 (term)


State 67

    0 $accept: program $end .

    $default  accept


State 68

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 69

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 70

   14 expr: expr PLUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 112
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 71

   15 expr: expr MINUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 113
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 72

   16 expr: expr MUL . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 73

   17 expr: expr DIV . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 74

   18 expr: expr MOD . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 75

   19 expr: expr EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 76

   20 expr: expr NOT_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 77

   21 expr: expr LESS_THAN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 78

   22 expr: expr GREATER_THAN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 79

   23 expr: expr LESS_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 80

   24 expr: expr GREATER_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 81

   25 expr: expr AND . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 82

   26 expr: expr OR . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 83

   55 normcall: L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 125
    objectdef   go to state 34
    const       go to state 37


State 84

   47 member: lvalue L_BRACKET . expr R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 85

   46 member: lvalue DOT . ID

    ID  shift, and go to state 127


State 86

   56 methodcall: D_DOT . ID L_PARENTHESIS elist R_PARENTHESIS

    ID  shift, and go to state 128


State 87

   32 term: lvalue PLUS_PLUS .

    $default  reduce using rule 32 (term)


State 88

   34 term: lvalue MINUS_MINUS .

    $default  reduce using rule 34 (term)


State 89

   36 assignexpr: lvalue ASSIGN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 129
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 90

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


State 91

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


State 92

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


State 93

   50 call: call L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 130
    objectdef   go to state 34
    const       go to state 37


State 94

   49 member: call L_BRACKET . expr R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 131
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 95

   48 member: call DOT . ID

    ID  shift, and go to state 132


State 96

   67 block_1: stmt . block_1

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 68 (block_1)

    stmt        go to state 96
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    block_1     go to state 133
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 97

   66 block: L_BRACE $@1 block_1 . R_BRACE

    R_BRACE  shift, and go to state 134


State 98

   28 term: L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 28 (term)


State 99

   40 primary: L_PARENTHESIS funcdef R_PARENTHESIS .
   52 call: L_PARENTHESIS funcdef R_PARENTHESIS . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 135

    $default  reduce using rule 40 (primary)


State 100

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 indexedelem: L_BRACE expr . COLON expr R_BRACE

    COLON         shift, and go to state 136
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 101

   60 objectdef: L_BRACKET elist R_BRACKET .

    $default  reduce using rule 60 (objectdef)


State 102

   58 elist: elist COMMA . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 137
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 103

   61 objectdef: L_BRACKET indexed R_BRACKET .

    $default  reduce using rule 61 (objectdef)


State 104

   63 indexed: indexed COMMA . indexedelem

    L_BRACE  shift, and go to state 45

    indexedelem  go to state 138


State 105

   52 call: L_PARENTHESIS funcdef . R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 139


State 106

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   85 ifstmt: IF L_PARENTHESIS expr . R_PARENTHESIS stmt
   86       | IF L_PARENTHESIS expr . R_PARENTHESIS stmt ELSE stmt

    R_PARENTHESIS  shift, and go to state 140
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MUL            shift, and go to state 72
    DIV            shift, and go to state 73
    MOD            shift, and go to state 74
    EQ             shift, and go to state 75
    NOT_EQ         shift, and go to state 76
    LESS_THAN      shift, and go to state 77
    GREATER_THAN   shift, and go to state 78
    LESS_EQ        shift, and go to state 79
    GREATER_EQ     shift, and go to state 80
    AND            shift, and go to state 81
    OR             shift, and go to state 82


State 107

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   87 whilestmt: WHILE L_PARENTHESIS expr . R_PARENTHESIS stmt

    R_PARENTHESIS  shift, and go to state 141
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71
    MUL            shift, and go to state 72
    DIV            shift, and go to state 73
    MOD            shift, and go to state 74
    EQ             shift, and go to state 75
    NOT_EQ         shift, and go to state 76
    LESS_THAN      shift, and go to state 77
    GREATER_THAN   shift, and go to state 78
    LESS_EQ        shift, and go to state 79
    GREATER_EQ     shift, and go to state 80
    AND            shift, and go to state 81
    OR             shift, and go to state 82


State 108

   58 elist: elist . COMMA expr
   88 forstmt: FOR L_PARENTHESIS elist . SEMICOLON expr SEMICOLON elist R_PARENTHESIS stmt

    SEMICOLON  shift, and go to state 142
    COMMA      shift, and go to state 102


State 109

   74 funcdef: FUNCTION ID $@4 . L_PARENTHESIS $@5 idlist R_PARENTHESIS block

    L_PARENTHESIS  shift, and go to state 143


State 110

   71 funcdef: FUNCTION $@2 L_PARENTHESIS . $@3 idlist R_PARENTHESIS block

    $default  reduce using rule 70 ($@3)

    $@3  go to state 144


State 111

   89 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 89 (returnstmt)


State 112

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 14 (expr)


State 113

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    MUL  shift, and go to state 72
    DIV  shift, and go to state 73
    MOD  shift, and go to state 74

    $default  reduce using rule 15 (expr)


State 114

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   16     | expr MUL expr .
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


State 115

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   17     | expr DIV expr .
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


State 116

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   18     | expr MOD expr .
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 117

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   19     | expr EQ expr .
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 19 (expr)


State 118

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   20     | expr NOT_EQ expr .
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 20 (expr)


State 119

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   21     | expr LESS_THAN expr .
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 70
    MINUS  shift, and go to state 71
    MUL    shift, and go to state 72
    DIV    shift, and go to state 73
    MOD    shift, and go to state 74

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 21 (expr)


State 120

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   22     | expr GREATER_THAN expr .
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 70
    MINUS  shift, and go to state 71
    MUL    shift, and go to state 72
    DIV    shift, and go to state 73
    MOD    shift, and go to state 74

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 22 (expr)


State 121

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   23     | expr LESS_EQ expr .
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 70
    MINUS  shift, and go to state 71
    MUL    shift, and go to state 72
    DIV    shift, and go to state 73
    MOD    shift, and go to state 74

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 23 (expr)


State 122

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   24     | expr GREATER_EQ expr .
   25     | expr . AND expr
   26     | expr . OR expr

    PLUS   shift, and go to state 70
    MINUS  shift, and go to state 71
    MUL    shift, and go to state 72
    DIV    shift, and go to state 73
    MOD    shift, and go to state 74

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 24 (expr)


State 123

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80

    $default  reduce using rule 25 (expr)


State 124

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81

    $default  reduce using rule 26 (expr)


State 125

   55 normcall: L_PARENTHESIS elist . R_PARENTHESIS
   58 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 145
    COMMA          shift, and go to state 102


State 126

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   47 member: lvalue L_BRACKET expr . R_BRACKET

    R_BRACKET     shift, and go to state 146
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 127

   46 member: lvalue DOT ID .

    $default  reduce using rule 46 (member)


State 128

   56 methodcall: D_DOT ID . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 147


State 129

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue ASSIGN expr .

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82

    $default  reduce using rule 36 (assignexpr)


State 130

   50 call: call L_PARENTHESIS elist . R_PARENTHESIS
   58 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 148
    COMMA          shift, and go to state 102


State 131

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   49 member: call L_BRACKET expr . R_BRACKET

    R_BRACKET     shift, and go to state 149
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 132

   48 member: call DOT ID .

    $default  reduce using rule 48 (member)


State 133

   67 block_1: stmt block_1 .

    $default  reduce using rule 67 (block_1)


State 134

   66 block: L_BRACE $@1 block_1 R_BRACE .

    $default  reduce using rule 66 (block)


State 135

   52 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 150
    objectdef   go to state 34
    const       go to state 37


State 136

   64 indexedelem: L_BRACE expr COLON . expr R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 151
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 137

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   58 elist: elist COMMA expr .

    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82

    $default  reduce using rule 58 (elist)


State 138

   63 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 63 (indexed)


State 139

   52 call: L_PARENTHESIS funcdef R_PARENTHESIS . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 135


State 140

   85 ifstmt: IF L_PARENTHESIS expr R_PARENTHESIS . stmt
   86       | IF L_PARENTHESIS expr R_PARENTHESIS . stmt ELSE stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    stmt        go to state 152
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 141

   87 whilestmt: WHILE L_PARENTHESIS expr R_PARENTHESIS . stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    stmt        go to state 153
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 142

   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON . expr SEMICOLON elist R_PARENTHESIS stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    expr        go to state 154
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


State 143

   74 funcdef: FUNCTION ID $@4 L_PARENTHESIS . $@5 idlist R_PARENTHESIS block

    $default  reduce using rule 73 ($@5)

    $@5  go to state 155


State 144

   71 funcdef: FUNCTION $@2 L_PARENTHESIS $@3 . idlist R_PARENTHESIS block

    ID  shift, and go to state 156

    $default  reduce using rule 82 (idlist)

    idlist  go to state 157


State 145

   55 normcall: L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 55 (normcall)


State 146

   47 member: lvalue L_BRACKET expr R_BRACKET .

    $default  reduce using rule 47 (member)


State 147

   56 methodcall: D_DOT ID L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 158
    objectdef   go to state 34
    const       go to state 37


State 148

   50 call: call L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 50 (call)


State 149

   49 member: call L_BRACKET expr R_BRACKET .

    $default  reduce using rule 49 (member)


State 150

   52 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist . R_PARENTHESIS
   58 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 159
    COMMA          shift, and go to state 102


State 151

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 indexedelem: L_BRACE expr COLON expr . R_BRACE

    R_BRACE       shift, and go to state 160
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 152

   85 ifstmt: IF L_PARENTHESIS expr R_PARENTHESIS stmt .
   86       | IF L_PARENTHESIS expr R_PARENTHESIS stmt . ELSE stmt

    ELSE  shift, and go to state 161

    $default  reduce using rule 85 (ifstmt)


State 153

   87 whilestmt: WHILE L_PARENTHESIS expr R_PARENTHESIS stmt .

    $default  reduce using rule 87 (whilestmt)


State 154

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . MUL expr
   17     | expr . DIV expr
   18     | expr . MOD expr
   19     | expr . EQ expr
   20     | expr . NOT_EQ expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . LESS_EQ expr
   24     | expr . GREATER_EQ expr
   25     | expr . AND expr
   26     | expr . OR expr
   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON expr . SEMICOLON elist R_PARENTHESIS stmt

    SEMICOLON     shift, and go to state 162
    PLUS          shift, and go to state 70
    MINUS         shift, and go to state 71
    MUL           shift, and go to state 72
    DIV           shift, and go to state 73
    MOD           shift, and go to state 74
    EQ            shift, and go to state 75
    NOT_EQ        shift, and go to state 76
    LESS_THAN     shift, and go to state 77
    GREATER_THAN  shift, and go to state 78
    LESS_EQ       shift, and go to state 79
    GREATER_EQ    shift, and go to state 80
    AND           shift, and go to state 81
    OR            shift, and go to state 82


State 155

   74 funcdef: FUNCTION ID $@4 L_PARENTHESIS $@5 . idlist R_PARENTHESIS block

    ID  shift, and go to state 156

    $default  reduce using rule 82 (idlist)

    idlist  go to state 163


State 156

   81 idlist: ID . idlist_1

    COMMA  shift, and go to state 164

    $default  reduce using rule 84 (idlist_1)

    idlist_1  go to state 165


State 157

   71 funcdef: FUNCTION $@2 L_PARENTHESIS $@3 idlist . R_PARENTHESIS block

    R_PARENTHESIS  shift, and go to state 166


State 158

   56 methodcall: D_DOT ID L_PARENTHESIS elist . R_PARENTHESIS
   58 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 167
    COMMA          shift, and go to state 102


State 159

   52 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 52 (call)


State 160

   64 indexedelem: L_BRACE expr COLON expr R_BRACE .

    $default  reduce using rule 64 (indexedelem)


State 161

   86 ifstmt: IF L_PARENTHESIS expr R_PARENTHESIS stmt ELSE . stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    stmt        go to state 168
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 162

   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON expr SEMICOLON . elist R_PARENTHESIS stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    $default  reduce using rule 59 (elist)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 169
    objectdef   go to state 34
    const       go to state 37


State 163

   74 funcdef: FUNCTION ID $@4 L_PARENTHESIS $@5 idlist . R_PARENTHESIS block

    R_PARENTHESIS  shift, and go to state 170


State 164

   83 idlist_1: COMMA . idlist

    ID  shift, and go to state 156

    $default  reduce using rule 82 (idlist)

    idlist  go to state 171


State 165

   81 idlist: ID idlist_1 .

    $default  reduce using rule 81 (idlist)


State 166

   71 funcdef: FUNCTION $@2 L_PARENTHESIS $@3 idlist R_PARENTHESIS . block

    L_BRACE  shift, and go to state 5

    block  go to state 172


State 167

   56 methodcall: D_DOT ID L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 56 (methodcall)


State 168

   86 ifstmt: IF L_PARENTHESIS expr R_PARENTHESIS stmt ELSE stmt .

    $default  reduce using rule 86 (ifstmt)


State 169

   58 elist: elist . COMMA expr
   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON expr SEMICOLON elist . R_PARENTHESIS stmt

    R_PARENTHESIS  shift, and go to state 173
    COMMA          shift, and go to state 102


State 170

   74 funcdef: FUNCTION ID $@4 L_PARENTHESIS $@5 idlist R_PARENTHESIS . block

    L_BRACE  shift, and go to state 5

    block  go to state 174


State 171

   83 idlist_1: COMMA idlist .

    $default  reduce using rule 83 (idlist_1)


State 172

   71 funcdef: FUNCTION $@2 L_PARENTHESIS $@3 idlist R_PARENTHESIS block .

    $default  reduce using rule 71 (funcdef)


State 173

   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON expr SEMICOLON elist R_PARENTHESIS . stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    PLUS_PLUS      shift, and go to state 10
    MINUS_MINUS    shift, and go to state 11
    IF             shift, and go to state 12
    NOT            shift, and go to state 13
    LOCAL          shift, and go to state 14
    TRUE           shift, and go to state 15
    FALSE          shift, and go to state 16
    WHILE          shift, and go to state 17
    FOR            shift, and go to state 18
    FUNCTION       shift, and go to state 19
    RETURN         shift, and go to state 20
    BREAK          shift, and go to state 21
    CONTINUE       shift, and go to state 22
    NIL            shift, and go to state 23
    UMINUS         shift, and go to state 24

    stmt        go to state 175
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    whilestmt   go to state 39
    forstmt     go to state 40
    returnstmt  go to state 41


State 174

   74 funcdef: FUNCTION ID $@4 L_PARENTHESIS $@5 idlist R_PARENTHESIS block .

    $default  reduce using rule 74 (funcdef)


State 175

   88 forstmt: FOR L_PARENTHESIS elist SEMICOLON expr SEMICOLON elist R_PARENTHESIS stmt .

    $default  reduce using rule 88 (forstmt)
