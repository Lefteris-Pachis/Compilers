Terminals unused in grammar

   CHAR


State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | /* empty */

    3 break: BREAK SEMICOLON

    4 continue: CONTINUE SEMICOLON

    5 stmt: expr SEMICOLON
    6     | ifstmt
    7     | whilestmt
    8     | forstmt
    9     | returnstmt
   10     | break
   11     | continue
   12     | block
   13     | funcdef
   14     | SEMICOLON

   15 expr: assignexpr
   16     | expr PLUS expr
   17     | expr MINUS expr
   18     | expr MUL expr
   19     | expr DIV expr
   20     | expr MOD expr
   21     | expr EQ expr
   22     | expr NOT_EQ expr
   23     | expr LESS_THAN expr
   24     | expr GREATER_THAN expr
   25     | expr LESS_EQ expr
   26     | expr GREATER_EQ expr
   27     | expr AND expr
   28     | expr OR expr
   29     | term

   30 term: L_PARENTHESIS expr R_PARENTHESIS
   31     | MINUS expr
   32     | NOT expr
   33     | PLUS_PLUS lvalue
   34     | lvalue PLUS_PLUS
   35     | MINUS_MINUS lvalue
   36     | lvalue MINUS_MINUS
   37     | primary

   38 assignexpr: lvalue ASSIGN expr

   39 primary: lvalue
   40        | call
   41        | objectdef
   42        | L_PARENTHESIS funcdef R_PARENTHESIS
   43        | const

   44 lvalue: ID
   45       | LOCAL ID
   46       | D_COLON ID
   47       | member

   48 member: lvalue DOT ID
   49       | lvalue L_BRACKET expr R_BRACKET
   50       | call DOT ID
   51       | call L_BRACKET expr R_BRACKET

   52 call: call L_PARENTHESIS elist R_PARENTHESIS
   53     | lvalue callsuffix
   54     | L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

   55 callsuffix: normcall
   56           | methodcall

   57 normcall: L_PARENTHESIS elist R_PARENTHESIS

   58 methodcall: D_DOT ID L_PARENTHESIS elist R_PARENTHESIS

   59 elist: expr
   60      | elist COMMA expr
   61      | /* empty */

   62 $@1: /* empty */

   63 objectdef: L_BRACKET $@1 elist R_BRACKET

   64 $@2: /* empty */

   65 objectdef: L_BRACKET $@2 indexed R_BRACKET

   66 indexed: indexedelem
   67        | indexed COMMA indexedelem

   68 indexedelem: L_BRACE expr COLON expr R_BRACE

   69 $@3: /* empty */

   70 block: L_BRACE $@3 block_1 R_BRACE

   71 block_1: stmt block_1
   72        | /* empty */

   73 funcname: ID
   74         | /* empty */

   75 funcprefix: FUNCTION funcname

   76 $@4: /* empty */

   77 funcargs: L_PARENTHESIS $@4 idlist R_PARENTHESIS

   78 funcblockstart: /* empty */

   79 funcblockend: /* empty */

   80 funcbody: funcblockstart block funcblockend

   81 funcdef: funcprefix funcargs funcbody

   82 const: INTEGER
   83      | DOUBLE
   84      | STRING
   85      | NIL
   86      | TRUE
   87      | FALSE

   88 idlist: ID idlist_1
   89       | /* empty */

   90 idlist_1: COMMA idlist
   91         | /* empty */

   92 ifprefix: IF L_PARENTHESIS expr R_PARENTHESIS

   93 elseprefix: ELSE

   94 ifstmt: ifprefix stmt
   95       | ifprefix stmt elseprefix stmt

   96 loopstart: /* empty */

   97 loopend: /* empty */

   98 loopstmt: loopstart stmt loopend

   99 whilestart: WHILE

  100 whilecond: L_PARENTHESIS expr R_PARENTHESIS

  101 whilestmt: whilestart whilecond loopstmt

  102 N: /* empty */

  103 M: /* empty */

  104 $@5: /* empty */

  105 forprefix: FOR $@5 L_PARENTHESIS elist SEMICOLON M expr SEMICOLON

  106 $@6: /* empty */

  107 forstmt: forprefix N elist R_PARENTHESIS $@6 N loopstmt N

  108 returnstmt: RETURN expr SEMICOLON
  109           | RETURN SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 82
DOUBLE (259) 83
STRING (260) 84
CHAR (261)
ID (262) 44 45 46 48 50 58 73 88
L_BRACE (263) 68 70
R_BRACE (264) 68 70
L_PARENTHESIS (265) 30 42 52 54 57 58 77 92 100 105
R_PARENTHESIS (266) 30 42 52 54 57 58 77 92 100 107
L_BRACKET (267) 49 51 63 65
R_BRACKET (268) 49 51 63 65
SEMICOLON (269) 3 4 5 14 105 108 109
COMMA (270) 60 67 90
COLON (271) 68
D_COLON (272) 46
DOT (273) 48 50
D_DOT (274) 58
PLUS (275) 16
MINUS (276) 17 31
MUL (277) 18
DIV (278) 19
MOD (279) 20
PLUS_PLUS (280) 33 34
MINUS_MINUS (281) 35 36
ASSIGN (282) 38
EQ (283) 21
NOT_EQ (284) 22
LESS_THAN (285) 23
GREATER_THAN (286) 24
LESS_EQ (287) 25
GREATER_EQ (288) 26
IF (289) 92
ELSE (290) 93
AND (291) 27
NOT (292) 32
OR (293) 28
LOCAL (294) 45
TRUE (295) 86
FALSE (296) 87
WHILE (297) 99
FOR (298) 105
FUNCTION (299) 75
RETURN (300) 108 109
BREAK (301) 3
CONTINUE (302) 4
NIL (303) 85
UMINUS (304)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2, on right: 0 1
break (52)
    on left: 3, on right: 10
continue (53)
    on left: 4, on right: 11
stmt (54)
    on left: 5 6 7 8 9 10 11 12 13 14, on right: 1 71 94 95 98
expr (55)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29, on right:
    5 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 38 49 51 59 60
    68 92 100 105 108
term (56)
    on left: 30 31 32 33 34 35 36 37, on right: 29
assignexpr (57)
    on left: 38, on right: 15
primary (58)
    on left: 39 40 41 42 43, on right: 37
lvalue (59)
    on left: 44 45 46 47, on right: 33 34 35 36 38 39 48 49 53
member (60)
    on left: 48 49 50 51, on right: 47
call (61)
    on left: 52 53 54, on right: 40 50 51 52
callsuffix (62)
    on left: 55 56, on right: 53
normcall (63)
    on left: 57, on right: 55
methodcall (64)
    on left: 58, on right: 56
elist (65)
    on left: 59 60 61, on right: 52 54 57 58 60 63 105 107
objectdef (66)
    on left: 63 65, on right: 41
$@1 (67)
    on left: 62, on right: 63
$@2 (68)
    on left: 64, on right: 65
indexed (69)
    on left: 66 67, on right: 65 67
indexedelem (70)
    on left: 68, on right: 66 67
block (71)
    on left: 70, on right: 12 80
$@3 (72)
    on left: 69, on right: 70
block_1 (73)
    on left: 71 72, on right: 70 71
funcname (74)
    on left: 73 74, on right: 75
funcprefix (75)
    on left: 75, on right: 81
funcargs (76)
    on left: 77, on right: 81
$@4 (77)
    on left: 76, on right: 77
funcblockstart (78)
    on left: 78, on right: 80
funcblockend (79)
    on left: 79, on right: 80
funcbody (80)
    on left: 80, on right: 81
funcdef (81)
    on left: 81, on right: 13 42 54
const (82)
    on left: 82 83 84 85 86 87, on right: 43
idlist (83)
    on left: 88 89, on right: 77 90
idlist_1 (84)
    on left: 90 91, on right: 88
ifprefix (85)
    on left: 92, on right: 94 95
elseprefix (86)
    on left: 93, on right: 95
ifstmt (87)
    on left: 94 95, on right: 6
loopstart (88)
    on left: 96, on right: 98
loopend (89)
    on left: 97, on right: 98
loopstmt (90)
    on left: 98, on right: 101 107
whilestart (91)
    on left: 99, on right: 101
whilecond (92)
    on left: 100, on right: 101
whilestmt (93)
    on left: 101, on right: 7
N (94)
    on left: 102, on right: 107
M (95)
    on left: 103, on right: 105
forprefix (96)
    on left: 105, on right: 107
$@5 (97)
    on left: 104, on right: 105
forstmt (98)
    on left: 107, on right: 8
$@6 (99)
    on left: 106, on right: 107
returnstmt (100)
    on left: 108 109, on right: 9


State 0

    0 $accept: . program $end

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    break       go to state 26
    continue    go to state 27
    stmt        go to state 28
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 1

   82 const: INTEGER .

    $default  reduce using rule 82 (const)


State 2

   83 const: DOUBLE .

    $default  reduce using rule 83 (const)


State 3

   84 const: STRING .

    $default  reduce using rule 84 (const)


State 4

   44 lvalue: ID .

    $default  reduce using rule 44 (lvalue)


State 5

   70 block: L_BRACE . $@3 block_1 R_BRACE

    $default  reduce using rule 69 ($@3)

    $@3  go to state 48


State 6

   30 term: L_PARENTHESIS . expr R_PARENTHESIS
   42 primary: L_PARENTHESIS . funcdef R_PARENTHESIS
   54 call: L_PARENTHESIS . funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    FUNCTION       shift, and go to state 20
    NIL            shift, and go to state 24

    expr        go to state 49
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    funcprefix  go to state 38
    funcdef     go to state 50
    const       go to state 40


State 7

   63 objectdef: L_BRACKET . $@1 elist R_BRACKET
   65          | L_BRACKET . $@2 indexed R_BRACKET

    L_BRACE   reduce using rule 64 ($@2)
    $default  reduce using rule 62 ($@1)

    $@1  go to state 51
    $@2  go to state 52


State 8

   14 stmt: SEMICOLON .

    $default  reduce using rule 14 (stmt)


State 9

   46 lvalue: D_COLON . ID

    ID  shift, and go to state 53


State 10

   31 term: MINUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 54
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 11

   33 term: PLUS_PLUS . lvalue

    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 55
    D_COLON        shift, and go to state 9
    LOCAL          shift, and go to state 15

    lvalue  go to state 56
    member  go to state 34
    call    go to state 57


State 12

   35 term: MINUS_MINUS . lvalue

    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 55
    D_COLON        shift, and go to state 9
    LOCAL          shift, and go to state 15

    lvalue  go to state 58
    member  go to state 34
    call    go to state 57


State 13

   92 ifprefix: IF . L_PARENTHESIS expr R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 59


State 14

   32 term: NOT . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 60
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 15

   45 lvalue: LOCAL . ID

    ID  shift, and go to state 61


State 16

   86 const: TRUE .

    $default  reduce using rule 86 (const)


State 17

   87 const: FALSE .

    $default  reduce using rule 87 (const)


State 18

   99 whilestart: WHILE .

    $default  reduce using rule 99 (whilestart)


State 19

  105 forprefix: FOR . $@5 L_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    $default  reduce using rule 104 ($@5)

    $@5  go to state 62


State 20

   75 funcprefix: FUNCTION . funcname

    ID  shift, and go to state 63

    $default  reduce using rule 74 (funcname)

    funcname  go to state 64


State 21

  108 returnstmt: RETURN . expr SEMICOLON
  109           | RETURN . SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 65
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 66
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 22

    3 break: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 67


State 23

    4 continue: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 24

   85 const: NIL .

    $default  reduce using rule 85 (const)


State 25

    0 $accept: program . $end

    $end  shift, and go to state 69


State 26

   10 stmt: break .

    $default  reduce using rule 10 (stmt)


State 27

   11 stmt: continue .

    $default  reduce using rule 11 (stmt)


State 28

    1 program: stmt . program

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 70
    break       go to state 26
    continue    go to state 27
    stmt        go to state 28
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 29

    5 stmt: expr . SEMICOLON
   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    SEMICOLON     shift, and go to state 71
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 30

   29 expr: term .

    $default  reduce using rule 29 (expr)


State 31

   15 expr: assignexpr .

    $default  reduce using rule 15 (expr)


State 32

   37 term: primary .

    $default  reduce using rule 37 (term)


State 33

   34 term: lvalue . PLUS_PLUS
   36     | lvalue . MINUS_MINUS
   38 assignexpr: lvalue . ASSIGN expr
   39 primary: lvalue .
   48 member: lvalue . DOT ID
   49       | lvalue . L_BRACKET expr R_BRACKET
   53 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 85
    L_BRACKET      shift, and go to state 86
    DOT            shift, and go to state 87
    D_DOT          shift, and go to state 88
    PLUS_PLUS      shift, and go to state 89
    MINUS_MINUS    shift, and go to state 90
    ASSIGN         shift, and go to state 91

    $default  reduce using rule 39 (primary)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 34

   47 lvalue: member .

    $default  reduce using rule 47 (lvalue)


State 35

   40 primary: call .
   50 member: call . DOT ID
   51       | call . L_BRACKET expr R_BRACKET
   52 call: call . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 95
    L_BRACKET      shift, and go to state 96
    DOT            shift, and go to state 97

    $default  reduce using rule 40 (primary)


State 36

   41 primary: objectdef .

    $default  reduce using rule 41 (primary)


State 37

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


State 38

   81 funcdef: funcprefix . funcargs funcbody

    L_PARENTHESIS  shift, and go to state 98

    funcargs  go to state 99


State 39

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


State 40

   43 primary: const .

    $default  reduce using rule 43 (primary)


State 41

   94 ifstmt: ifprefix . stmt
   95       | ifprefix . stmt elseprefix stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    break       go to state 26
    continue    go to state 27
    stmt        go to state 100
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 42

    6 stmt: ifstmt .

    $default  reduce using rule 6 (stmt)


State 43

  101 whilestmt: whilestart . whilecond loopstmt

    L_PARENTHESIS  shift, and go to state 101

    whilecond  go to state 102


State 44

    7 stmt: whilestmt .

    $default  reduce using rule 7 (stmt)


State 45

  107 forstmt: forprefix . N elist R_PARENTHESIS $@6 N loopstmt N

    $default  reduce using rule 102 (N)

    N  go to state 103


State 46

    8 stmt: forstmt .

    $default  reduce using rule 8 (stmt)


State 47

    9 stmt: returnstmt .

    $default  reduce using rule 9 (stmt)


State 48

   70 block: L_BRACE $@3 . block_1 R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 72 (block_1)

    break       go to state 26
    continue    go to state 27
    stmt        go to state 104
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    block_1     go to state 105
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 49

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   30 term: L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 106
    PLUS           shift, and go to state 72
    MINUS          shift, and go to state 73
    MUL            shift, and go to state 74
    DIV            shift, and go to state 75
    MOD            shift, and go to state 76
    EQ             shift, and go to state 77
    NOT_EQ         shift, and go to state 78
    LESS_THAN      shift, and go to state 79
    GREATER_THAN   shift, and go to state 80
    LESS_EQ        shift, and go to state 81
    GREATER_EQ     shift, and go to state 82
    AND            shift, and go to state 83
    OR             shift, and go to state 84


State 50

   42 primary: L_PARENTHESIS funcdef . R_PARENTHESIS
   54 call: L_PARENTHESIS funcdef . R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 107


State 51

   63 objectdef: L_BRACKET $@1 . elist R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 109
    objectdef   go to state 36
    const       go to state 40


State 52

   65 objectdef: L_BRACKET $@2 . indexed R_BRACKET

    L_BRACE  shift, and go to state 110

    indexed      go to state 111
    indexedelem  go to state 112


State 53

   46 lvalue: D_COLON ID .

    $default  reduce using rule 46 (lvalue)


State 54

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   31 term: MINUS expr .

    $default  reduce using rule 31 (term)


State 55

   54 call: L_PARENTHESIS . funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    FUNCTION  shift, and go to state 20

    funcprefix  go to state 38
    funcdef     go to state 113


State 56

   33 term: PLUS_PLUS lvalue .
   48 member: lvalue . DOT ID
   49       | lvalue . L_BRACKET expr R_BRACKET
   53 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 85
    L_BRACKET      shift, and go to state 86
    DOT            shift, and go to state 87
    D_DOT          shift, and go to state 88

    $default  reduce using rule 33 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 57

   50 member: call . DOT ID
   51       | call . L_BRACKET expr R_BRACKET
   52 call: call . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 95
    L_BRACKET      shift, and go to state 96
    DOT            shift, and go to state 97


State 58

   35 term: MINUS_MINUS lvalue .
   48 member: lvalue . DOT ID
   49       | lvalue . L_BRACKET expr R_BRACKET
   53 call: lvalue . callsuffix

    L_PARENTHESIS  shift, and go to state 85
    L_BRACKET      shift, and go to state 86
    DOT            shift, and go to state 87
    D_DOT          shift, and go to state 88

    $default  reduce using rule 35 (term)

    callsuffix  go to state 92
    normcall    go to state 93
    methodcall  go to state 94


State 59

   92 ifprefix: IF L_PARENTHESIS . expr R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 114
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 60

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   32 term: NOT expr .

    $default  reduce using rule 32 (term)


State 61

   45 lvalue: LOCAL ID .

    $default  reduce using rule 45 (lvalue)


State 62

  105 forprefix: FOR $@5 . L_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    L_PARENTHESIS  shift, and go to state 115


State 63

   73 funcname: ID .

    $default  reduce using rule 73 (funcname)


State 64

   75 funcprefix: FUNCTION funcname .

    $default  reduce using rule 75 (funcprefix)


State 65

  109 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 109 (returnstmt)


State 66

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
  108 returnstmt: RETURN expr . SEMICOLON

    SEMICOLON     shift, and go to state 116
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 67

    3 break: BREAK SEMICOLON .

    $default  reduce using rule 3 (break)


State 68

    4 continue: CONTINUE SEMICOLON .

    $default  reduce using rule 4 (continue)


State 69

    0 $accept: program $end .

    $default  accept


State 70

    1 program: stmt program .

    $default  reduce using rule 1 (program)


State 71

    5 stmt: expr SEMICOLON .

    $default  reduce using rule 5 (stmt)


State 72

   16 expr: expr PLUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 117
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 73

   17 expr: expr MINUS . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 118
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 74

   18 expr: expr MUL . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 119
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 75

   19 expr: expr DIV . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 120
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 76

   20 expr: expr MOD . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 121
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 77

   21 expr: expr EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 122
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 78

   22 expr: expr NOT_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 123
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 79

   23 expr: expr LESS_THAN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 124
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 80

   24 expr: expr GREATER_THAN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 125
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 81

   25 expr: expr LESS_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 126
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 82

   26 expr: expr GREATER_EQ . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 127
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 83

   27 expr: expr AND . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 128
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 84

   28 expr: expr OR . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 129
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 85

   57 normcall: L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 130
    objectdef   go to state 36
    const       go to state 40


State 86

   49 member: lvalue L_BRACKET . expr R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 131
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 87

   48 member: lvalue DOT . ID

    ID  shift, and go to state 132


State 88

   58 methodcall: D_DOT . ID L_PARENTHESIS elist R_PARENTHESIS

    ID  shift, and go to state 133


State 89

   34 term: lvalue PLUS_PLUS .

    $default  reduce using rule 34 (term)


State 90

   36 term: lvalue MINUS_MINUS .

    $default  reduce using rule 36 (term)


State 91

   38 assignexpr: lvalue ASSIGN . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 134
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 92

   53 call: lvalue callsuffix .

    $default  reduce using rule 53 (call)


State 93

   55 callsuffix: normcall .

    $default  reduce using rule 55 (callsuffix)


State 94

   56 callsuffix: methodcall .

    $default  reduce using rule 56 (callsuffix)


State 95

   52 call: call L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 135
    objectdef   go to state 36
    const       go to state 40


State 96

   51 member: call L_BRACKET . expr R_BRACKET

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 136
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 97

   50 member: call DOT . ID

    ID  shift, and go to state 137


State 98

   77 funcargs: L_PARENTHESIS . $@4 idlist R_PARENTHESIS

    $default  reduce using rule 76 ($@4)

    $@4  go to state 138


State 99

   81 funcdef: funcprefix funcargs . funcbody

    $default  reduce using rule 78 (funcblockstart)

    funcblockstart  go to state 139
    funcbody        go to state 140


State 100

   94 ifstmt: ifprefix stmt .
   95       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 141

    ELSE      [reduce using rule 94 (ifstmt)]
    $default  reduce using rule 94 (ifstmt)

    elseprefix  go to state 142


State 101

  100 whilecond: L_PARENTHESIS . expr R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 143
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 102

  101 whilestmt: whilestart whilecond . loopstmt

    $default  reduce using rule 96 (loopstart)

    loopstart  go to state 144
    loopstmt   go to state 145


State 103

  107 forstmt: forprefix N . elist R_PARENTHESIS $@6 N loopstmt N

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 146
    objectdef   go to state 36
    const       go to state 40


State 104

   71 block_1: stmt . block_1

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    $default  reduce using rule 72 (block_1)

    break       go to state 26
    continue    go to state 27
    stmt        go to state 104
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    block_1     go to state 147
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 105

   70 block: L_BRACE $@3 block_1 . R_BRACE

    R_BRACE  shift, and go to state 148


State 106

   30 term: L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 30 (term)


State 107

   42 primary: L_PARENTHESIS funcdef R_PARENTHESIS .
   54 call: L_PARENTHESIS funcdef R_PARENTHESIS . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 149

    $default  reduce using rule 42 (primary)


State 108

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   59 elist: expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84

    $default  reduce using rule 59 (elist)


State 109

   60 elist: elist . COMMA expr
   63 objectdef: L_BRACKET $@1 elist . R_BRACKET

    R_BRACKET  shift, and go to state 150
    COMMA      shift, and go to state 151


State 110

   68 indexedelem: L_BRACE . expr COLON expr R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 152
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 111

   65 objectdef: L_BRACKET $@2 indexed . R_BRACKET
   67 indexed: indexed . COMMA indexedelem

    R_BRACKET  shift, and go to state 153
    COMMA      shift, and go to state 154


State 112

   66 indexed: indexedelem .

    $default  reduce using rule 66 (indexed)


State 113

   54 call: L_PARENTHESIS funcdef . R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 155


State 114

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   92 ifprefix: IF L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 156
    PLUS           shift, and go to state 72
    MINUS          shift, and go to state 73
    MUL            shift, and go to state 74
    DIV            shift, and go to state 75
    MOD            shift, and go to state 76
    EQ             shift, and go to state 77
    NOT_EQ         shift, and go to state 78
    LESS_THAN      shift, and go to state 79
    GREATER_THAN   shift, and go to state 80
    LESS_EQ        shift, and go to state 81
    GREATER_EQ     shift, and go to state 82
    AND            shift, and go to state 83
    OR             shift, and go to state 84


State 115

  105 forprefix: FOR $@5 L_PARENTHESIS . elist SEMICOLON M expr SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 157
    objectdef   go to state 36
    const       go to state 40


State 116

  108 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 108 (returnstmt)


State 117

   16 expr: expr . PLUS expr
   16     | expr PLUS expr .
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    MUL  shift, and go to state 74
    DIV  shift, and go to state 75
    MOD  shift, and go to state 76

    $default  reduce using rule 16 (expr)


State 118

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   17     | expr MINUS expr .
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    MUL  shift, and go to state 74
    DIV  shift, and go to state 75
    MOD  shift, and go to state 76

    $default  reduce using rule 17 (expr)


State 119

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   18     | expr MUL expr .
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 18 (expr)


State 120

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   19     | expr DIV expr .
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 19 (expr)


State 121

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   20     | expr MOD expr .
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    $default  reduce using rule 20 (expr)


State 122

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   21     | expr EQ expr .
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 21 (expr)


State 123

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   22     | expr NOT_EQ expr .
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82

    EQ      error (nonassociative)
    NOT_EQ  error (nonassociative)

    $default  reduce using rule 22 (expr)


State 124

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   23     | expr LESS_THAN expr .
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 23 (expr)


State 125

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   24     | expr GREATER_THAN expr .
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 24 (expr)


State 126

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   25     | expr LESS_EQ expr .
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 25 (expr)


State 127

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   26     | expr GREATER_EQ expr .
   27     | expr . AND expr
   28     | expr . OR expr

    PLUS   shift, and go to state 72
    MINUS  shift, and go to state 73
    MUL    shift, and go to state 74
    DIV    shift, and go to state 75
    MOD    shift, and go to state 76

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_EQ       error (nonassociative)
    GREATER_EQ    error (nonassociative)

    $default  reduce using rule 26 (expr)


State 128

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   27     | expr AND expr .
   28     | expr . OR expr

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82

    $default  reduce using rule 27 (expr)


State 129

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   28     | expr OR expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83

    $default  reduce using rule 28 (expr)


State 130

   57 normcall: L_PARENTHESIS elist . R_PARENTHESIS
   60 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 158
    COMMA          shift, and go to state 151


State 131

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   49 member: lvalue L_BRACKET expr . R_BRACKET

    R_BRACKET     shift, and go to state 159
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 132

   48 member: lvalue DOT ID .

    $default  reduce using rule 48 (member)


State 133

   58 methodcall: D_DOT ID . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 160


State 134

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   38 assignexpr: lvalue ASSIGN expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84

    $default  reduce using rule 38 (assignexpr)


State 135

   52 call: call L_PARENTHESIS elist . R_PARENTHESIS
   60 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 161
    COMMA          shift, and go to state 151


State 136

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   51 member: call L_BRACKET expr . R_BRACKET

    R_BRACKET     shift, and go to state 162
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 137

   50 member: call DOT ID .

    $default  reduce using rule 50 (member)


State 138

   77 funcargs: L_PARENTHESIS $@4 . idlist R_PARENTHESIS

    ID  shift, and go to state 163

    $default  reduce using rule 89 (idlist)

    idlist  go to state 164


State 139

   80 funcbody: funcblockstart . block funcblockend

    L_BRACE  shift, and go to state 5

    block  go to state 165


State 140

   81 funcdef: funcprefix funcargs funcbody .

    $default  reduce using rule 81 (funcdef)


State 141

   93 elseprefix: ELSE .

    $default  reduce using rule 93 (elseprefix)


State 142

   95 ifstmt: ifprefix stmt elseprefix . stmt

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    break       go to state 26
    continue    go to state 27
    stmt        go to state 166
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 143

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
  100 whilecond: L_PARENTHESIS expr . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 167
    PLUS           shift, and go to state 72
    MINUS          shift, and go to state 73
    MUL            shift, and go to state 74
    DIV            shift, and go to state 75
    MOD            shift, and go to state 76
    EQ             shift, and go to state 77
    NOT_EQ         shift, and go to state 78
    LESS_THAN      shift, and go to state 79
    GREATER_THAN   shift, and go to state 80
    LESS_EQ        shift, and go to state 81
    GREATER_EQ     shift, and go to state 82
    AND            shift, and go to state 83
    OR             shift, and go to state 84


State 144

   98 loopstmt: loopstart . stmt loopend

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_BRACE        shift, and go to state 5
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    SEMICOLON      shift, and go to state 8
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    IF             shift, and go to state 13
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    WHILE          shift, and go to state 18
    FOR            shift, and go to state 19
    FUNCTION       shift, and go to state 20
    RETURN         shift, and go to state 21
    BREAK          shift, and go to state 22
    CONTINUE       shift, and go to state 23
    NIL            shift, and go to state 24

    break       go to state 26
    continue    go to state 27
    stmt        go to state 168
    expr        go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    block       go to state 37
    funcprefix  go to state 38
    funcdef     go to state 39
    const       go to state 40
    ifprefix    go to state 41
    ifstmt      go to state 42
    whilestart  go to state 43
    whilestmt   go to state 44
    forprefix   go to state 45
    forstmt     go to state 46
    returnstmt  go to state 47


State 145

  101 whilestmt: whilestart whilecond loopstmt .

    $default  reduce using rule 101 (whilestmt)


State 146

   60 elist: elist . COMMA expr
  107 forstmt: forprefix N elist . R_PARENTHESIS $@6 N loopstmt N

    R_PARENTHESIS  shift, and go to state 169
    COMMA          shift, and go to state 151


State 147

   71 block_1: stmt block_1 .

    $default  reduce using rule 71 (block_1)


State 148

   70 block: L_BRACE $@3 block_1 R_BRACE .

    $default  reduce using rule 70 (block)


State 149

   54 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 170
    objectdef   go to state 36
    const       go to state 40


State 150

   63 objectdef: L_BRACKET $@1 elist R_BRACKET .

    $default  reduce using rule 63 (objectdef)


State 151

   60 elist: elist COMMA . expr

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 171
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 152

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   68 indexedelem: L_BRACE expr . COLON expr R_BRACE

    COLON         shift, and go to state 172
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 153

   65 objectdef: L_BRACKET $@2 indexed R_BRACKET .

    $default  reduce using rule 65 (objectdef)


State 154

   67 indexed: indexed COMMA . indexedelem

    L_BRACE  shift, and go to state 110

    indexedelem  go to state 173


State 155

   54 call: L_PARENTHESIS funcdef R_PARENTHESIS . L_PARENTHESIS elist R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 149


State 156

   92 ifprefix: IF L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 92 (ifprefix)


State 157

   60 elist: elist . COMMA expr
  105 forprefix: FOR $@5 L_PARENTHESIS elist . SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 174
    COMMA      shift, and go to state 151


State 158

   57 normcall: L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 57 (normcall)


State 159

   49 member: lvalue L_BRACKET expr R_BRACKET .

    $default  reduce using rule 49 (member)


State 160

   58 methodcall: D_DOT ID L_PARENTHESIS . elist R_PARENTHESIS

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    $default  reduce using rule 61 (elist)

    expr        go to state 108
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 175
    objectdef   go to state 36
    const       go to state 40


State 161

   52 call: call L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 52 (call)


State 162

   51 member: call L_BRACKET expr R_BRACKET .

    $default  reduce using rule 51 (member)


State 163

   88 idlist: ID . idlist_1

    COMMA  shift, and go to state 176

    $default  reduce using rule 91 (idlist_1)

    idlist_1  go to state 177


State 164

   77 funcargs: L_PARENTHESIS $@4 idlist . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 178


State 165

   80 funcbody: funcblockstart block . funcblockend

    $default  reduce using rule 79 (funcblockend)

    funcblockend  go to state 179


State 166

   95 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 95 (ifstmt)


State 167

  100 whilecond: L_PARENTHESIS expr R_PARENTHESIS .

    $default  reduce using rule 100 (whilecond)


State 168

   98 loopstmt: loopstart stmt . loopend

    $default  reduce using rule 97 (loopend)

    loopend  go to state 180


State 169

  107 forstmt: forprefix N elist R_PARENTHESIS . $@6 N loopstmt N

    $default  reduce using rule 106 ($@6)

    $@6  go to state 181


State 170

   54 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist . R_PARENTHESIS
   60 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 182
    COMMA          shift, and go to state 151


State 171

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   60 elist: elist COMMA expr .

    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84

    $default  reduce using rule 60 (elist)


State 172

   68 indexedelem: L_BRACE expr COLON . expr R_BRACE

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 183
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 173

   67 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 67 (indexed)


State 174

  105 forprefix: FOR $@5 L_PARENTHESIS elist SEMICOLON . M expr SEMICOLON

    $default  reduce using rule 103 (M)

    M  go to state 184


State 175

   58 methodcall: D_DOT ID L_PARENTHESIS elist . R_PARENTHESIS
   60 elist: elist . COMMA expr

    R_PARENTHESIS  shift, and go to state 185
    COMMA          shift, and go to state 151


State 176

   90 idlist_1: COMMA . idlist

    ID  shift, and go to state 163

    $default  reduce using rule 89 (idlist)

    idlist  go to state 186


State 177

   88 idlist: ID idlist_1 .

    $default  reduce using rule 88 (idlist)


State 178

   77 funcargs: L_PARENTHESIS $@4 idlist R_PARENTHESIS .

    $default  reduce using rule 77 (funcargs)


State 179

   80 funcbody: funcblockstart block funcblockend .

    $default  reduce using rule 80 (funcbody)


State 180

   98 loopstmt: loopstart stmt loopend .

    $default  reduce using rule 98 (loopstmt)


State 181

  107 forstmt: forprefix N elist R_PARENTHESIS $@6 . N loopstmt N

    $default  reduce using rule 102 (N)

    N  go to state 187


State 182

   54 call: L_PARENTHESIS funcdef R_PARENTHESIS L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 54 (call)


State 183

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
   68 indexedelem: L_BRACE expr COLON expr . R_BRACE

    R_BRACE       shift, and go to state 188
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 184

  105 forprefix: FOR $@5 L_PARENTHESIS elist SEMICOLON M . expr SEMICOLON

    INTEGER        shift, and go to state 1
    DOUBLE         shift, and go to state 2
    STRING         shift, and go to state 3
    ID             shift, and go to state 4
    L_PARENTHESIS  shift, and go to state 6
    L_BRACKET      shift, and go to state 7
    D_COLON        shift, and go to state 9
    MINUS          shift, and go to state 10
    PLUS_PLUS      shift, and go to state 11
    MINUS_MINUS    shift, and go to state 12
    NOT            shift, and go to state 14
    LOCAL          shift, and go to state 15
    TRUE           shift, and go to state 16
    FALSE          shift, and go to state 17
    NIL            shift, and go to state 24

    expr        go to state 189
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 185

   58 methodcall: D_DOT ID L_PARENTHESIS elist R_PARENTHESIS .

    $default  reduce using rule 58 (methodcall)


State 186

   90 idlist_1: COMMA idlist .

    $default  reduce using rule 90 (idlist_1)


State 187

  107 forstmt: forprefix N elist R_PARENTHESIS $@6 N . loopstmt N

    $default  reduce using rule 96 (loopstart)

    loopstart  go to state 144
    loopstmt   go to state 190


State 188

   68 indexedelem: L_BRACE expr COLON expr R_BRACE .

    $default  reduce using rule 68 (indexedelem)


State 189

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MUL expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . EQ expr
   22     | expr . NOT_EQ expr
   23     | expr . LESS_THAN expr
   24     | expr . GREATER_THAN expr
   25     | expr . LESS_EQ expr
   26     | expr . GREATER_EQ expr
   27     | expr . AND expr
   28     | expr . OR expr
  105 forprefix: FOR $@5 L_PARENTHESIS elist SEMICOLON M expr . SEMICOLON

    SEMICOLON     shift, and go to state 191
    PLUS          shift, and go to state 72
    MINUS         shift, and go to state 73
    MUL           shift, and go to state 74
    DIV           shift, and go to state 75
    MOD           shift, and go to state 76
    EQ            shift, and go to state 77
    NOT_EQ        shift, and go to state 78
    LESS_THAN     shift, and go to state 79
    GREATER_THAN  shift, and go to state 80
    LESS_EQ       shift, and go to state 81
    GREATER_EQ    shift, and go to state 82
    AND           shift, and go to state 83
    OR            shift, and go to state 84


State 190

  107 forstmt: forprefix N elist R_PARENTHESIS $@6 N loopstmt . N

    $default  reduce using rule 102 (N)

    N  go to state 192


State 191

  105 forprefix: FOR $@5 L_PARENTHESIS elist SEMICOLON M expr SEMICOLON .

    $default  reduce using rule 105 (forprefix)


State 192

  107 forstmt: forprefix N elist R_PARENTHESIS $@6 N loopstmt N .

    $default  reduce using rule 107 (forstmt)
